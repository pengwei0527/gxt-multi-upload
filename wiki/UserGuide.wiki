#summary How to include GXT Multi Upload widget into your project.

=Including and using widget in your project=

Including and using GXT Multi Upload widget in your project is easy. The widget requires GWT and GXT libraries and corresponding project structure.
So just follow these steps:
  # Download (or build from SVN) the latest version of widget.
  # Include jar file into classpath.
  # Include widget module into your GWT module.
  # Instantiate and call MVP classes of widget.
  # Create server side code for handling uploads.

==Download or build project from SVN==
You can download the latest jar module of widget from Downloads section of this project web.

For checkout the project from SVN, see Source section. After project checkout, it is ready to build using Maven project tool. After build, you can install jar file it into your Maven repository.

==Include jar file into classpath==
This depends on your favorite IDE or build tool. When you are using maven, and want to include widget into your project, you have to install jar into your Maven repository. Then add the following dependency fragment into your project:
{{{
<dependency>
  <groupId>com.gxt-multi-upload</groupId> 
  <artifactId>gxt-multi-upload</artifactId> 
  <version>0.1</version> 
</dependency>
}}}
The version number depends on downloaded/builded version.

==Include widget module into your GWT module==
It's easy. Just add following fragment into your GWT module:
{{{
<inherits name='gxt.multiupload.MultiUpload'/>
}}}
MultiUpload is the name of project's GWT module.

==Instantiate and call MVP classes of widget==
The source code for instantiate Presenter and View of widget should be following:
{{{
ColumnModel columnModel = ...
Grid<Model> grid = new Grid<Model>(new ListStore<Model>(), columnModel);

MultiUploadView view = new MultiUploadView(grid);
view.getFormPanel().setAction("multiupload");
MultiUploadPresenter presenter = new MultiUploadPresenter(view);
presenter.go();
}}}
First of all, you have to create a GXT's Grid instance, or you can use your custom one (extended from GXT's Grid class or its ancestors). Grid has to be a Model type, which is GXT MultiUpload interface, which defines access methods for filename, status and status message. For detail info, see source code. The default implementation of this interface is FileUploadModel class. If you want use your own model, it  has to implements a Model interface.

In next lines, the view class is instantiated and the action (URL) of service for upload handling is defined. After instantiating presenter, the method go() is called, which binds Presenter code together with View and shows the dialog.